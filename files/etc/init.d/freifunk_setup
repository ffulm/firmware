#!/bin/sh /etc/rc.common

#This script is run once at startup and is then deleted.

START=99


initial_wifi_setup()
{
	echo "(I) Setup /etc/config/wireless"

	#default SSID
	local ap_ssid="$(uci get freifunk.@settings[0].community).freifunk.net"

	#add batman version to the AdHoc interface SSID
	local ah_ssid=`uci get freifunk.@settings[0].default_ah_ssid`

	#default BSSID
	local ah_bssid=`uci get freifunk.@settings[0].default_ah_bssid`

	#delete all wifi interfaces
	while uci -q delete wireless.@wifi-iface[0]; do :; done

	#test if we can span both Ad-Hoc and Access Point interfaces
	config_wifi() {
		local ds="$1" #device section
		local ah_ok=0 ap_ok=0 #interface status
		local wifi_device=`uci get -q wireless.$ds.device`
		local h n p

		#config_get wifi_device "$ds" device
		[ -z "$wifi_device" ] && wifi_device="$ds"

		echo "(I) Configure wifi device: '$wifi_device'"

		if [ `uci get wireless.$ds.channel` -gt 35 ]; then
			uci set wireless.$ds.channel=36
		else
			uci set wireless.$ds.channel=1
		fi

		uci set wireless.$ds.country=DE
		uci set wireless.$ds.disabled=0

		#remove ap/ah wifi interface entries
		clear_wifi_interfaces() {
			uci delete -q "$h"
			uci delete -q "$n"
			uci delete -q "$p"
		}

		#AdHoc for batman
		add_ah_interface() {
			h=wireless.`uci add wireless wifi-iface`
			uci set $h.device="$wifi_device"
			uci set $h.ifname="${wifi_device}_mesh"
			uci set $h.mode=adhoc
			uci set $h.network="${wifi_device}_mesh"
			uci set $h.ssid="$ah_ssid"
			uci set $h.bssid="$ah_bssid"
			uci set $h.hidden=1

			n=network.`uci get $h.network`
			uci set $n="interface"
			uci set $n.mtu=1406
			uci set $n.proto="batadv"
			uci set $n.mesh="bat0"
		}

		#AccessPoint for clients
		add_ap_interface() {
			p=wireless.`uci add wireless wifi-iface`
			uci set $p.device="$wifi_device"
			uci set $p.ifname="${wifi_device}_freifunk"
			uci set $p.mode=ap
			uci set $p.network=freifunk
			uci set $p.ssid="$ap_ssid"
			uci set $p.encryption="none"
		}

		wifi_restart() {
			echo "(I) Wireless down/up"
			wifi reload
			sleep 5
		}

		check_wifi_interfaces() {
			ip addr list dev "${wifi_device}_mesh" &> /dev/null && ah_ok=1 || ah_ok=0
			ip addr list dev "${wifi_device}_freifunk" &> /dev/null && ap_ok=1 || ap_ok=0
		}

		add_ah_interface
		#add_ap_interface
		#wifi_restart
		#check_wifi_interfaces

		#if not both interfaces work; try only Ad-Hoc
		#if [ $ah_ok -eq 0 -o $ap_ok -eq 0 ]; then
		#	echo "(I) Cannot use AdHoc and AccessPoint mode at the same time - try AdHoc only now."
		#	clear_wifi_interfaces
		#	add_ah_interface
		#	wifi_restart
		#	check_wifi_interfaces
		#fi

		[ $ah_ok -eq 1 ] && echo "(I) Add AdHoc interface for wifi device ${wifi_device}."
		[ $ap_ok -eq 1 ] && echo "(I) Add AccessPoint interface for wifi device ${wifi_device}."

		#ifname not needed anymore
		uci delete -q $h.ifname
		uci delete -q $p.ifname
	}

	config_load wireless
	config_foreach config_wifi wifi-device
}

initial_freifunk_setup()
{
	local freifunk_interfaces="$1" mac="$2"

	echo "(I) Setup freifunk network."

	uci delete -q network.freifunk
	uci set network.freifunk="interface"
	uci set network.freifunk.type="bridge"
	uci set network.freifunk.ifname="$freifunk_interfaces"
	uci set network.freifunk.ipaddr="10.26.127.0"
	uci set network.freifunk.macaddr="$mac"
	uci delete -q network.freifunk.ip6addr
	uci set network.freifunk.proto=static
	uci set network.freifunk.netmask="255.255.192.0"
	uci set network.freifunk.igmp_snooping="0"
	uci set network.freifunk.force_link="1"
	uci set network.freifunk.bridge_empty="1"

	uci set network.freifunk6="interface"
	uci set network.freifunk6.ifname="@freifunk"
	uci set network.freifunk6.proto="dhcpv6"
	uci set network.freifunk6.reqaddress="none" #slaac only
	uci set network.freifunk6.reqprefix="no" #disable dhcpv6 /128 request
}

initial_setup()
{
	local version="$1"
	local prefix="fdef:17a0:ffb1:300::/64"

	local wan_interface=$(uci get -q network.wan.ifname)
	echo "(I) WAN interface: '$wan_interface'"

	local lan_interface=$(uci get -q network.lan.ifname)
	echo "(I) LAN interface: '$lan_interface'"

	local ah_ssid="mesh_v"`dmesg | sed -n -r "s/.*compatibility version ([0-9]+).*/\1/p"`
	echo "(I) AdHoc SSID: '$ah_ssid'"

	echo "(I) Set empty root password."
	(echo ""; sleep 1; echo "") | passwd > /dev/null

	#get a unique MAC address to identify the node
	local mac=$(cat /sys/class/ieee80211/phy0/macaddress)
	if [ -z "$mac" -o "$mac" = "00:11:22:33:44:55" ]; then
		mac=$(cat /sys/class/net/eth0/address)
		if [ -z "$mac" -o "$mac" = "00:11:22:33:44:55" ]; then
			#random MAC address
			mac=$(echo -n 02; dd bs=1 count=5 if=/dev/random 2>/dev/null | hexdump -v -e '/1 ":%02X"')
		fi
	fi

	#translate to local administered mac
	a=${mac%%:*} #cut out first hex
	a=$((0x$a | 2)) #set second bit to 1
	a=`printf '%02x\n' $a` #convert to hex
	mac="$a:${mac#*:}" #reassemble mac

	echo "(I) MAC: '$mac'"

	echo "(I) Set Prefix and populate /etc/hosts."

	uci set -q network.globals="globals"
	uci set network.globals.ula_prefix="$prefix"
	echo "192.168.132.1 node" >> /etc/hosts

	# ------------------------------------- #
	# F R E I F U N K  S E T U P #
	# ------------------------------------- #

	uci set freifunk.@settings[0].default_ah_ssid="$ah_ssid"
	uci set freifunk.@settings[0].version="$version"

	# ------------------------------------------- #
	# S E T U P  W I R E L E S S #
	# ------------------------------------------- #

	initial_wifi_setup

	# ------------------------------------- #
	# P U B L I C  S E T U P #
	# ------------------------------------- #

	initial_freifunk_setup "bat0" "$mac"

	# ------------------------------------- #
	# B A T M A N  S E T U P #
	# ------------------------------------- #

	echo "(I) Add network sections to add fastd to batman-adv and set MTU."
	local n=network.fastd_mesh
	uci set $n=interface
	uci set $n.ifname=fastd_mesh
	uci set $n.mtu=1406
	uci set $n.proto="batadv"
	uci set $n.mesh="bat0"
	uci set $n.mesh_no_rebroadcast="1"

	#special WR1043v2 switch fixup for the webui
	if [ "$(cat /tmp/sysinfo/model)" = "TP-Link TL-WR1043N/ND v2" ]; then
		uci set network.@switch_vlan[-2].ports="1 2 3 4 0t"
		uci set network.@switch_vlan[-1].ports="5 0t"
		uci set network.lan.ifname="eth1.1"
		uci set network.wan.ifname="eth1.2"
		uci commit network
	fi

	cat >> /etc/sysctl.conf <<  EOF

# increase neighbor table timings by a factor of 10
net.ipv6.neigh.default.gc_interval=300
net.ipv6.neigh.default.gc_stale_time=600
net.ipv6.neigh.default.base_reachable_time_ms=300
EOF

	uci set system.@system[0].timezone='CET-1CEST,M3.5.0,M10.5.0/3'

	#write everything to flash
	uci commit
}

start()
{
	#Setup the system for the initial Freifunk configuration.
	#This script is only run once and deletes itself at the end.

	exec >/root/freifunk_setup.log 2>&1
	. /lib/functions.sh

	echo "(I) Start freifunk_setup"

	local from_version="$(uci get -q freifunk.@settings[0].version)"
	local to_version="0.4.4-mini"

	echo "(I) Update from '$from_version' to '$to_version'"
	case "$from_version" in
		"")
			echo "(I) Start initial setup."
			initial_setup "$to_version"
			;;
		*)
			echo "(I) No configuration updater set. Only version will be updated."
			;;
	esac

	uci set -q freifunk.@settings[0].version="$to_version"
	uci commit -q freifunk

	/etc/init.d/telnet disable

	#disable and remove this script
	/etc/init.d/freifunk_setup disable
	rm -f /etc/init.d/freifunk_setup

	echo "(I) Done - rebooting now."
	reboot
}
