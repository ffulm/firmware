#!/bin/sh

# Setup the system for the initial Freifunk configuration.
# This script is only run once om first boot and is deleted afterwards.

exec >/root/freifunk_setup.log 2>&1

. /lib/functions.sh

random_mac() {
	echo -n 02; dd bs=1 count=5 if=/dev/urandom 2>/dev/null | hexdump -v -e '/1 ":%02x"'
}

initial_wifi_setup()
{
	echo "(I) Setup /etc/config/wireless"

	#AP default SSID
	local ap_ssid="$(uci get freifunk.@settings[0].community).freifunk.net"

	#802.11s default mesh id
	local mesh_id="$(uci get freifunk.@settings[0].default_mesh_id)"

	#delete all wifi interfaces
	while uci -q delete wireless.@wifi-iface[0]; do :; done

	#test if we can span both Ad-Hoc and Access Point interfaces
	config_wifi() {
		local ds="$1" #device section
		local ah_ok=0 ap_ok=0 #interface status
		local wifi_device=`uci get -q wireless.$ds.device`
		local wifi_path=`uci get -q wireless.$ds.path`
		local h n p

		[ -z "$wifi_device" ] && wifi_device="$ds"

		echo "(I) Configure wifi device: '$wifi_device'"

		if [ `uci get wireless.$ds.channel` -gt 35 ]; then
			uci set wireless.$ds.channel=36
		else
			uci set wireless.$ds.channel=1
		fi

		uci set wireless.$ds.country='DE'
		uci set wireless.$ds.disabled='0'

		h=wireless.`uci add wireless wifi-iface`
		uci set $h.device="$wifi_device"
		uci set $h.mode="mesh"
		uci set $h.network="${wifi_device}_mesh"
		uci set $h.mesh_id="$mesh_id"
		uci set $h.mesh_fwding=0

		n=network.`uci get $h.network`
		uci set $n="interface"
		uci set $n.mtu=1406
		uci set $n.proto="batadv"
		uci set $n.mesh="bat0"

		#add AccessPoint for clients
		p=wireless.`uci add wireless wifi-iface`
		uci set $p.device="$wifi_device"
		uci set $p.mode=ap
		uci set $p.network=freifunk
		uci set $p.ssid="$ap_ssid"
		uci set $p.encryption="none"
	}

	config_load wireless
	config_foreach config_wifi wifi-device
}

initial_lan_setup()
{
	echo "(I) Setup lan network."

	local lan_interfaces="$1"

	uci delete -q network.lan
	uci set network.lan="interface"
	uci set network.lan.type="bridge"
	uci set network.lan.ifname="$lan_interfaces"
	uci delete -q network.lan.ip6addr
	uci delete -q network.lan.ipaddr
	uci add_list network.lan.ipaddr="192.168.133.1"
	uci set network.lan.proto=static
	uci set network.lan.netmask="255.255.255.0"
	uci set network.lan.igmp_snooping="0"
	uci set network.lan.force_link="1"
	uci set network.lan.bridge_empty="1"
}

initial_freifunk_setup()
{
	echo "(I) Setup freifunk network."

	local freifunk_interfaces="$1"
	local freifunk_mac="$2"	

	uci delete -q network.freifunk
	uci set network.freifunk="interface"
	uci set network.freifunk.type="bridge"
	uci set network.freifunk.ifname="$freifunk_interfaces"
	uci set network.freifunk.macaddr="$freifunk_mac"
	uci delete -q network.freifunk.ip6addr
	uci delete -q network.freifunk.ipaddr
	uci set network.freifunk.proto=static
	uci set network.freifunk.netmask="255.255.192.0"
	uci set network.freifunk.igmp_snooping="0"
	uci set network.freifunk.force_link="1"
	uci set network.freifunk.bridge_empty="1"

	uci set network.freifunk6="interface"
	uci set network.freifunk6.ifname="@freifunk"
	uci set network.freifunk6.proto="dhcpv6"
	uci set network.freifunk6.reqaddress="none" #slaac only
	uci set network.freifunk6.reqprefix="no" #disable dhcpv6 /128 request
}

initial_local_node_setup()
{
	echo "(I) Setup IPv4 local node access."

	local ula_prefix="$(uci get network.globals.ula_prefix)"
	local addr6="${ula_prefix%%::*}::0"
	local addr4="10.33.127.0"

	uci add_list network.freifunk.ipaddr="$addr4"

	cat >> /etc/firewall.user <<-  EOF

	#isolate local-node IPv4 address
	ebtables -A FORWARD --logical-out br-freifunk -o bat0 -p arp --arp-ip-dst $addr4/32 -j DROP
	ebtables -A OUTPUT --logical-out br-freifunk -o bat0 -p arp --arp-ip-dst $addr4/32 -j DROP
	ebtables -A FORWARD --logical-out br-freifunk -o bat0 -p IPv4 --ip-source $addr4/32 -j DROP
	ebtables -A OUTPUT --logical-out br-freifunk -o bat0 -p IPv4 --ip-source $addr4/32 -j DROP
	EOF
}

initial_wan_setup()
{
	echo "(I) Setup WAN network."

	local wan_interfaces="$1"
	local wan_mac="$2"

	uci -q delete network.wan
	uci -q delete network.wan6

	uci set network.wan="interface"
	uci set network.wan.type="bridge"
	uci set network.wan.ifname="$wan_interfaces"
	uci set network.wan.proto="dhcp"
	uci set network.wan.macaddr="$wan_mac"
	uci set network.wan.bridge_empty="1"

	uci set network.wan6="interface"
	uci set network.wan6.ifname="@wan"
	uci set network.wan6.proto="dhcpv6"
	#add the default route for wan to table 1
	uci set network.wan6.ip6table="1"

	#use table 1 also for all traffic marked by mark 1 (fastd)
	uci set network.wan6_lookup="rule6"
	uci set network.wan6_lookup.mark="0x01/0x01"
	uci set network.wan6_lookup.lookup="1"

	uci set network.wan6_unreachable="route6"
	uci set network.wan6_unreachable.type="unreachable"
	uci set network.wan6_unreachable.table="1"
	uci set network.wan6_unreachable.target="::/0"
	uci set network.wan6_unreachable.metric="65535"
	uci set network.wan6_unreachable.gateway="::"
	uci set network.wan6_unreachable.interface="loopback"
}

initial_setup()
{
	local prefix="fdef:17a0:fff1:300::/64"

	local wan_interface=$(uci get -q network.wan.ifname)
	echo "(I) WAN interface: '$wan_interface'"

	local lan_interface=$(uci get -q network.lan.ifname)
	echo "(I) LAN interface: '$lan_interface'"

	local mesh_id=$(uci get -q freifunk.@settings[0].default_mesh_id)
	echo "(I) Mesh ID: '$mesh_id'"

	echo "(I) Set empty root password."
	(echo ""; sleep 1; echo "") | passwd > /dev/null

	#get a unique MAC address to identify the node
	local mac="$(cat /sys/class/ieee80211/phy0/macaddress)"
	if [ -z "$mac" -o "$mac" = "00:11:22:33:44:55" ]; then
		mac="$(cat /sys/class/net/eth0/address)"
		if [ -z "$mac" -o "$mac" = "00:11:22:33:44:55" ]; then
			#random MAC address
			mac="$(random_mac)"
		fi
	fi

	local mac_ga="$mac"
	#translate to local administered mac
	a=${mac%%:*} #cut out first hex
	a=$((0x$a ^ 2)) #flip second bit
	a=`printf '%02x\n' $a` #convert to hex
	local mac_la="$a:${mac#*:}" #reassemble mac

	echo "(I) MAC: '$mac'"

	echo "(I) Set Prefix and populate /etc/hosts."

	uci set -q network.globals="globals"
	uci set network.globals.ula_prefix="$prefix"
	echo "10.33.127.0 node" >> /etc/hosts

	# ------------------------------------------- #
	# S E T U P  W I R E L E S S #
	# ------------------------------------------- #

	initial_wifi_setup

	# ------------------------------------- #
	# P R I V A T E  S E T U P #
	# ------------------------------------- #

	initial_lan_setup "$lan_interface"

	# ------------------------------------- #
	# P U B L I C  S E T U P #
	# ------------------------------------- #

	initial_freifunk_setup "bat0" "$mac_la"

	# ------------------------------------- #
	# W A N  S E T U P #
	# ------------------------------------- #

	initial_wan_setup "$wan_interface" "$mac_ga"

	# ------------------------------------- #
	# B A T M A N  S E T U P #
	# ------------------------------------- #

	echo "(I) Add network sections to add fastd to batman-adv and set MTU."
	local n=network.fastd_mesh
	uci set $n=interface
	uci set $n.ifname=fastd_mesh
	uci set $n.mtu=1406
	uci set $n.proto="batadv"
	uci set $n.mesh="bat0"
	uci set $n.mesh_no_rebroadcast="1"

	# ------------------------------------- #
	# M I S C  S E T U P #
	# ------------------------------------- #

	#special WR1043v2 switch fixup for the webui
	if [ "$(cat /tmp/sysinfo/model)" = "TP-Link TL-WR1043N/ND v2" ]; then
		uci set network.@switch_vlan[-2].ports="1 2 3 4 0t"
		uci set network.@switch_vlan[-1].ports="5 0t"
		uci set network.lan.ifname="eth1.1"
		uci set network.wan.ifname="eth1.2"
		uci commit network
	fi

	#special Archer C7 v2 switch fixup for the webui
	if [ "$(cat /tmp/sysinfo/model)" = "TP-Link Archer C7 v2" ]; then
		uci set network.@switch_vlan[-2].ports="2 3 4 5 0t"
		uci set network.@switch_vlan[-1].ports="1 6 0t"
		uci set network.lan.ifname="eth1.1"
		uci set network.wan.ifname="eth1.2"
		uci commit network
	fi

	#allow access of the local node using a common IP address
	initial_local_node_setup

	#save defaults for use in the web-ui
	cp /etc/config/network /etc/config/network_defaults

	#reduce NDP traffic
	cat >> /etc/sysctl.conf <<-  EOF

	# increase neighbor table timings by a factor of 10
	net.ipv6.neigh.default.gc_interval=300
	net.ipv6.neigh.default.gc_stale_time=600
	net.ipv6.neigh.default.base_reachable_time_ms=300

	# by default, either accept_ra or forwarding is enabled
	# disable both here, since OpenWrt handles both apart from the Linux kernel
	net.ipv6.conf.all.accept_ra=0
	net.ipv6.conf.default.accept_ra=0
	net.ipv6.conf.br-freifunk.forwarding=0
	net.ipv6.conf.br-lan.forwarding=0

	#reboot on out of memory
	vm.panic_on_oom=1

	EOF

	uci set system.@system[0].timezone='CET-1CEST,M3.5.0,M10.5.0/3'

	#write everything to flash
	uci commit
}

update_04_to_041()
{
	rm /etc/dnsmasq.conf
	cp /rom/etc/uhttpd.crt /etc/ 2> /dev/null
	cp /rom/etc/uhttpd.key /etc/ 2> /dev/null

	wireless_fixup_iface() {
		local cfg="$1" mode
		config_get mode $cfg "mode"

		if [ "$mode" = "adhoc" ]; then
			uci delete -q wireless.$cfg.mcast_rate
		fi
	}

	echo "(I) Update network/wireless settings."
	config_load wireless
	config_foreach wireless_fixup_iface wifi-iface
	uci commit wireless
}

update_041_to_042()
{
	cp /rom/etc/uhttpd.crt /etc/ 2> /dev/null
	cp /rom/etc/uhttpd.key /etc/ 2> /dev/null
	cp /rom/etc/config/uhttpd /etc/config/

	local default_ap_ssid="$(uci get freifunk.@settings[0].default_ap_ssid)"

	uci delete -q freifunk.@settings[0].default_ap_ssid
	uci set freifunk.@settings[0].community="${default_ap_ssid%%.*}"
	uci commit freifunk

	uci set network.freifunk6.reqaddress="none"
	uci set network.freifunk6.reqprefix="no"
	uci commit network

	uci delete -q dhcp.@dhcp[0].ra
	uci commit dhcp

	sed -i "/#disable forwarding.*/d" /etc/sysctl.conf
	sed -i "/net.ipv6.conf.br-freifunk.forwarding.*/d" /etc/sysctl.conf
	sed -i "/net.ipv6.conf.br-lan.forwarding.*/d" /etc/sysctl.conf

	cat >> /etc/sysctl.conf <<-  EOF

	# increase neighbor table timings by a factor of 10
	net.ipv6.neigh.default.gc_interval=300
	net.ipv6.neigh.default.gc_stale_time=600
	net.ipv6.neigh.default.base_reachable_time_ms=300

	EOF
}

update_042_to_043() {
	cp /rom/etc/uhttpd.crt /etc/ 2> /dev/null
	cp /rom/etc/uhttpd.key /etc/ 2> /dev/null

	local fastd_enabled="$(uci get fastd.default.enabled)"
	local fastd_secret="$(uci get fastd.default.secret)"
	local fastd_key="$(uci get fastd.default.key)"

	cp /rom/etc/config/autoupdater /etc/config/
	cp /rom/etc/config/batman-adv /etc/config/
	cp /rom/etc/config/fastd /etc/config/
	cp /rom/etc/crontabs/root /etc/crontabs/

	uci set network.fastd_mesh.mesh_no_rebroadcast="1"
	uci commit network

	uci set fastd.default.enabled="$fastd_enabled"
	uci set fastd.default.secret="$fastd_secret"
	uci set fastd.default.key="$fastd_key"
	uci commit fastd
}

update_043_to_044()
{
	cp /rom/etc/uhttpd.crt /etc/ 2> /dev/null
	cp /rom/etc/uhttpd.key /etc/ 2> /dev/null

	cp /rom/etc/config/batman-adv /etc/config/
	cp /rom/etc/config/dhcp /etc/config/
	cp /rom/etc/firewall.user /etc/
	cp /rom/etc/crontabs/root /etc/crontabs/

	uci set fastd.vpn1_badsalzuflen.key="d780166fdedf9c311350902e1b71e7887c5bbd45a99c9813b0056de25b29a970"
	uci commit fastd

	uci set network.freifunk.ipaddr="10.33.127.0"
	uci set network.freifunk.netmask="255.255.192.0"
	uci commit network

	sed -i "s/base_reachable_time=/base_reachable_time_ms=/" /etc/sysctl.conf
}

update_044_to_045()
{
	cp /rom/etc/uhttpd.crt /etc/ 2> /dev/null
	cp /rom/etc/uhttpd.key /etc/ 2> /dev/null

	local secret="$(uci get fastd.default.secret)"
	local key="$(uci get fastd.default.key)"
	cp /rom/etc/config/fastd /etc/config/
	uci set fastd.default.secret="$secret"
	uci set fastd.default.key="$key"
	uci commit fastd
}

update_045_to_050()
{
	#keep previous HTTPS certs
	cp /rom/etc/uhttpd.crt /etc/ 2> /dev/null
	cp /rom/etc/uhttpd.key /etc/ 2> /dev/null

	#restore LED settings
	sh  /rom/etc/uci-defaults/01_leds

	#use new fastd config and dhcp
	cp /rom/etc/config/fastd /etc/config/
	cp /rom/etc/config/dhcp /etc/config/

	#forgot to change last time
	sed -i "s/192.168.132.1/10.33.127.0/" /etc/hosts

	if [ "$(uci get -q network.freifunk.ipaddr)" = "10.33.127.0" ]; then
		uci delete network.freifunk.ipaddr
	fi

	#use fresh firewall.user
	cp /rom/etc/firewall.user /etc/

	#needs to be updated manually
	cp /rom/etc/profile /etc/

	#make sure ipaddr/ip6addr are lists
	for s in freifunk lan; do
		local ipaddr="$(uci get -q network.$s.ipaddr)"
		local ip6addr="$(uci get -q network.$s.ip6addr)"
		uci delete -q network.$s.ipaddr
		uci delete -q network.$s.ip6addr
		[ -n "$ipaddr" ] && uci add_list network.$s.ipaddr="$ipaddr"
		[ -n "$ip6addr" ] && uci add_list network.$s.ip6addr="$ip6addr"
	done

	#apply local node settings
	initial_local_node_setup

	cat >> /etc/sysctl.conf <<-  EOF

	# by default, either accept_ra or forwarding is enabled
	# disable both here, since OpenWrt handles both apart from the Linux kernel
	net.ipv6.conf.all.accept_ra=0
	net.ipv6.conf.default.accept_ra=0
	net.ipv6.conf.br-freifunk.forwarding=0
	net.ipv6.conf.br-lan.forwarding=0

	#reboot on out of memory
	vm.panic_on_oom=1

	EOF

	#set a static MAC address for WAN
	echo "(I) Set static MAC for WAN"
	if [ -z "$(uci get -q network.wan.macaddr)" ]; then
		#get the MAC for WAN that was used previously
		local mac="$(cat /sys/class/ieee80211/phy0/macaddress)"
		if [ -z "$mac" -o "$mac" = "00:11:22:33:44:55" ]; then
			mac="$(cat /sys/class/net/eth0/address)"
			if [ -z "$mac" -o "$mac" = "00:11:22:33:44:55" ]; then
				#random MAC address
				mac="$(random_mac)"
			fi
		fi
		uci -q set network.wan.macaddr="$mac"
	fi

	uci delete freifunk.@settings[0].default_ah_ssid
	uci delete freifunk.@settings[0].default_ah_bssid
	uci set freifunk.@settings[0].default_mesh_id="mesh_v15"

	#adhoc => 802.11s
	wireless_adhoc_to_mesh() {
		local cfg="$1" mode device network ssid path

		config_get device $cfg "device"
		config_get mode $cfg "mode"
		config_get network $cfg "network"

		if [ "$mode" = "adhoc" ]; then
			echo "(I) Change $network from adhoc to 802.11s"

			uci delete -q wireless.$cfg.ssid
			uci delete -q wireless.$cfg.bssid
			uci delete -q wireless.$cfg.hidden

			uci set wireless.$cfg.mode="mesh"
			uci set wireless.$cfg.mesh_id="$(uci get freifunk.@settings[0].default_mesh_id)"
			uci set wireless.$cfg.mesh_fwding="0"
		fi
	}

	config_load wireless
	config_foreach wireless_adhoc_to_mesh wifi-iface

	uci commit freifunk
	uci commit system
	uci commit wireless
	uci commit network
	uci commit firewall
}

start()
{
	echo "(I) Start freifunk_setup"

	local from_version="$(uci get -q freifunk.@settings[0].version)"
	local to_version="$(uci get -c /rom/etc/config -q freifunk.@settings[0].version)"

	#marker to check if the setup has already been run before
	if [ -n "$(uci get -q freifunk.@settings[0].first_boot)" ]; then
		uci delete -q freifunk.@settings[0].first_boot
		from_version=""
	fi

	update_version() {
		uci set -q freifunk.@settings[0].version="$to_version"
		uci commit -q freifunk
	}

	echo "(I) Update from '$from_version' to '$to_version'"
	case "$from_version" in
		"0.4")
			echo "(I) Apply update."
			update_04_to_041
			update_041_to_042
			update_042_to_043
			update_043_to_044
			update_044_to_045
			update_045_to_050
			update_version
			;;
		"0.4.1")
			echo "(I) Apply update."
			update_041_to_042
			update_042_to_043
			update_043_to_044
			update_044_to_045
			update_045_to_050
			update_version
			;;
		"0.4.2")
			echo "(I) Apply update."
			update_042_to_043
			update_043_to_044
			update_044_to_045
			update_045_to_050
			update_version
			;;
		"0.4.3")
			echo "(I) Apply update."
			update_043_to_044
			update_044_to_045
			update_045_to_050
			;;
		"0.4.4")
			echo "(I) Apply update."
			update_044_to_045
			update_045_to_050
			;;
		"0.4.5")
			echo "(I) Apply update."
			update_045_to_050
			update_version
			;;
		"")
			echo "(I) Start initial setup."
			initial_setup
			update_version
			;;
		*)
			echo "(I) No configuration updater set. No idea what to do."
			;;
	esac

	/etc/init.d/fastd disable
	/etc/init.d/telnet disable
	/etc/init.d/alfred enable
	/etc/init.d/simple-radvd enable
	/etc/init.d/freifunk_init enable

	echo "(I) Done."
}

start

exit 0
