From cadd6b61b7bc268ac73bf989c69e3baf28321f71 Mon Sep 17 00:00:00 2001
From: Moritz Warning <moritzwarning@web.de>
Date: Thu, 6 Aug 2015 20:44:50 +0200
Subject: [PATCH 1/5] batman-adv: upgrade package to latest release 2015.1

---
 batman-adv/Makefile                                |  8 +-
 ...Add-lower-layer-header-length-to-headroom.patch | 88 ++++++++++++++++++++++
 2 files changed, 92 insertions(+), 4 deletions(-)
 create mode 100644 batman-adv/patches/0001-batman-adv-Add-lower-layer-header-length-to-headroom.patch

diff --git a/batman-adv/Makefile b/batman-adv/Makefile
index 6909ba8..7e43de4 100644
--- a/batman-adv/Makefile
+++ b/batman-adv/Makefile
@@ -10,9 +10,9 @@ include $(TOPDIR)/rules.mk
 
 PKG_NAME:=batman-adv
 
-PKG_VERSION:=2014.4.0
+PKG_VERSION:=2015.1
 PKG_RELEASE:=1
-PKG_MD5SUM:=b1518e84ce530883d224c6ca4c673ce8
+PKG_MD5SUM:=45f98d315b4290dc208e01190193c514
 
 PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
 PKG_SOURCE_URL:=http://downloads.open-mesh.org/batman/releases/batman-adv-$(PKG_VERSION)
@@ -29,7 +29,7 @@ define KernelPackage/batman-adv
   SUBMENU:=Network Support
   DEPENDS:=+KMOD_BATMAN_ADV_BLA:kmod-lib-crc16 +kmod-crypto-core +kmod-crypto-crc32c +kmod-lib-crc32c
   TITLE:=B.A.T.M.A.N. Adv
-  FILES:=$(PKG_BUILD_DIR)/batman-adv.$(LINUX_KMOD_SUFFIX)
+  FILES:=$(PKG_BUILD_DIR)/net/batman-adv/batman-adv.$(LINUX_KMOD_SUFFIX)
   AUTOLOAD:=$(call AutoLoad,50,batman-adv)
 endef
 
@@ -65,7 +65,7 @@ MAKE_BATMAN_ADV_ARGS += \
 define Build/Prepare
 	$(call Build/Prepare/Default)
 	$(SED) '/#define _NET_BATMAN_ADV_MAIN_H_/a\#undef CONFIG_MODULE_STRIPPED' \
-		$(PKG_BUILD_DIR)/main.h
+		$(PKG_BUILD_DIR)/net/batman-adv/main.h
 endef
 
 define Build/Compile
diff --git a/batman-adv/patches/0001-batman-adv-Add-lower-layer-header-length-to-headroom.patch b/batman-adv/patches/0001-batman-adv-Add-lower-layer-header-length-to-headroom.patch
new file mode 100644
index 0000000..c5adedb
--- /dev/null
+++ b/batman-adv/patches/0001-batman-adv-Add-lower-layer-header-length-to-headroom.patch
@@ -0,0 +1,88 @@
+batman-adv: Add lower layer header length to headroom
+
+The maximum of hard_header_len and needed_headroom of all slave interfaces
+of a batman-adv device must be used to define the batman-adv device
+headroom/header_len. This is required to avoid too small headroom problems
+when these slave devices try to send the encapsulated packet.
+
+The batman-adv therefore uses:
+
+	needed_headroom = max(0, dev[0].needed_headroom, ...,
+			      dev[n].needed_headroom)
+	hard_header_len = max(ETH_HLEN, dev[0].hard_header_len, ...,
+			      dev[n].hard_header_len) + ETH_HLEN +
+			  max(sizeof(batadv_*cast_packet))
+
+Signed-off-by: Sven Eckelmann <sven@narfation.org>
+---
+ net/batman-adv/hard-interface.c | 33 +++++++++++++++++++++++++++++++++
+ net/batman-adv/soft-interface.c |  2 +-
+ 2 files changed, 34 insertions(+), 1 deletion(-)
+
+diff --git a/net/batman-adv/hard-interface.c b/net/batman-adv/hard-interface.c
+index f4a15d2e5eaf..a501aae1077b 100644
+--- a/net/batman-adv/hard-interface.c
++++ b/net/batman-adv/hard-interface.c
+@@ -252,12 +252,45 @@ static void batadv_check_known_mac_addr(const struct net_device *net_dev)
+ 	rcu_read_unlock();
+ }
+ 
++/**
++ * batadv_hardif_recalc_headroom() - Recalculate skbuff headroom parameters
++ * @soft_iface: netdev struct of the mesh interface
++ */
++static void batadv_hardif_recalc_headroom(struct net_device *soft_iface)
++{
++	const struct batadv_hard_iface *hard_iface;
++	unsigned short hard_header_len = ETH_HLEN;
++	unsigned short needed_headroom = 0;
++
++	rcu_read_lock();
++	list_for_each_entry_rcu(hard_iface, &batadv_hardif_list, list) {
++		if ((hard_iface->if_status != BATADV_IF_ACTIVE) &&
++		    (hard_iface->if_status != BATADV_IF_TO_BE_ACTIVATED))
++			continue;
++
++		if (hard_iface->soft_iface != soft_iface)
++			continue;
++
++		hard_header_len = max_t(unsigned short, hard_header_len,
++					hard_iface->net_dev->hard_header_len);
++
++		needed_headroom = max_t(unsigned short, needed_headroom,
++					hard_iface->net_dev->needed_headroom);
++	}
++	rcu_read_unlock();
++
++	soft_iface->needed_headroom = needed_headroom;
++	soft_iface->hard_header_len = hard_header_len + batadv_max_header_len();
++}
++
+ int batadv_hardif_min_mtu(struct net_device *soft_iface)
+ {
+ 	struct batadv_priv *bat_priv = netdev_priv(soft_iface);
+ 	const struct batadv_hard_iface *hard_iface;
+ 	int min_mtu = INT_MAX;
+ 
++	batadv_hardif_recalc_headroom(soft_iface);
++
+ 	rcu_read_lock();
+ 	list_for_each_entry_rcu(hard_iface, &batadv_hardif_list, list) {
+ 		if ((hard_iface->if_status != BATADV_IF_ACTIVE) &&
+diff --git a/net/batman-adv/soft-interface.c b/net/batman-adv/soft-interface.c
+index 36b23f31df2a..b4c110791203 100644
+--- a/net/batman-adv/soft-interface.c
++++ b/net/batman-adv/soft-interface.c
+@@ -948,7 +948,7 @@ static void batadv_softif_init_early(struct net_device *dev)
+ 	 */
+ 	dev->mtu = ETH_DATA_LEN;
+ 	/* reserve more space in the skbuff for our header */
+-	dev->hard_header_len = batadv_max_header_len();
++	dev->hard_header_len = ETH_HLEN + batadv_max_header_len();
+ 
+ 	/* generate random address */
+ 	eth_hw_addr_random(dev);
+-- 
+2.5.0
+
+
-- 
2.1.4

