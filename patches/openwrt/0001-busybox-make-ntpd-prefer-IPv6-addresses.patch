From 7079dae49340e3520b6029a25a345131f334a12c Mon Sep 17 00:00:00 2001
From: Moritz Warning <moritzwarning@web.de>
Date: Mon, 26 Jan 2015 19:07:59 +0100
Subject: [PATCH 1/1] busybox: make ntpd prefer IPv6 addresses

ntpd uses host2sockaddr to get the first address returned by DNS and does so only once.
Since the first address is often an IPv4 address, this causes ntpd to fail in IPv6 only environments.
This patch starts by requesting an IPv6 address and then alternate between AF_INET6 and AF_UNSPEC (which might likely return an IPv4 address).
---
 ...pd_prefer_ipv6_address_and_then_alternate.patch | 73 ++++++++++++++++++++++
 1 file changed, 73 insertions(+)
 create mode 100644 package/utils/busybox/patches/231-ntpd_prefer_ipv6_address_and_then_alternate.patch

diff --git a/package/utils/busybox/patches/231-ntpd_prefer_ipv6_address_and_then_alternate.patch b/package/utils/busybox/patches/231-ntpd_prefer_ipv6_address_and_then_alternate.patch
new file mode 100644
index 0000000..1168261
--- /dev/null
+++ b/package/utils/busybox/patches/231-ntpd_prefer_ipv6_address_and_then_alternate.patch
@@ -0,0 +1,73 @@
+Index: busybox-1.22.1/networking/ntpd.c
+===================================================================
+--- busybox-1.22.1.orig/networking/ntpd.c
++++ busybox-1.22.1/networking/ntpd.c
+@@ -237,6 +237,9 @@ typedef struct {
+ 
+ typedef struct {
+ 	len_and_sockaddr *p_lsa;
++#if ENABLE_FEATURE_IPV6
++	int				p_lookup_af;
++#endif
+ 	char             *p_dotted;
+ 	char             *p_hostname;
+ 	int              p_fd;
+@@ -741,6 +744,9 @@ add_peers(char *s)
+ 	p = xzalloc(sizeof(*p));
+ 	p->p_hostname = s;
+ 	p->p_lsa = NULL;
++#if ENABLE_FEATURE_IPV6
++	p->p_lookup_af = AF_INET6; /* Try IPv6 address first */
++#endif
+ 	p->p_dotted = NULL;
+ 	p->p_fd = -1;
+ 	p->p_xmt_msg.m_status = MODE_CLIENT | (NTP_VERSION << 3);
+@@ -791,22 +797,33 @@ send_query_to_peer(peer_t *p)
+ 	 * Uncomment this and use strace to see it in action:
+ 	 */
+ 
+-	/* See if the peer hostname already resolved yet, if not, retry to resolv and return on failure */
+-	if (!p->p_lsa)
+-	{
+-		p->p_lsa = host2sockaddr(p->p_hostname, 123);
++	if (p->p_lsa) {
++		free( p->p_lsa );
++		free( p->p_dotted );
++		p->p_lsa = NULL;
++		p->p_dotted = NULL;
++	}
+ 
+-		if (p->p_lsa)
+-		{
+-			p->p_dotted = xmalloc_sockaddr2dotted_noport(&p->p_lsa->u.sa);
+-			VERB1 bb_error_msg("resolved peer %s to %s", p->p_hostname, p->p_dotted);
+-		}
+-		else
+-		{
+-			set_next(p, RETRY_INTERVAL);
+-			VERB1 bb_error_msg("could not resolve peer %s, skipping", p->p_hostname);
+-			return;
+-		}
++	/* Resolve hostname, return on failure */
++#if ENABLE_FEATURE_IPV6
++	p->p_lsa = host_and_af2sockaddr(p->p_hostname, 123, p->p_lookup_af);
++
++	/* Alternate between IPv6 and an unspecified protocol (will be IPv4 if present) */
++	p->p_lookup_af = (p->p_lookup_af == AF_INET6) ? AF_UNSPEC : AF_INET6;
++#else
++	p->p_lsa = host2sockaddr(p->p_hostname, 123);
++#endif
++
++	if (p->p_lsa)
++	{
++		p->p_dotted = xmalloc_sockaddr2dotted_noport(&p->p_lsa->u.sa);
++		VERB1 bb_error_msg("resolved peer %s to %s", p->p_hostname, p->p_dotted);
++	}
++	else
++	{
++		set_next(p, RETRY_INTERVAL);
++		VERB1 bb_error_msg("could not resolve peer %s, skipping", p->p_hostname);
++		return;
+ 	}
+ 
+ #define PROBE_LOCAL_ADDR /* { len_and_sockaddr lsa; lsa.len = LSA_SIZEOF_SA; getsockname(p->query.fd, &lsa.u.sa, &lsa.len); } */
-- 
2.1.4

